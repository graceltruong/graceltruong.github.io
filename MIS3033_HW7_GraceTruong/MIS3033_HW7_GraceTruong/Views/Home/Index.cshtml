<html>
    <head>
        <title>Grace Truong, HW7 MIS3033</title>
    <!-- Bootstrap -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>

    <!-- Bootstrap icons -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css" rel="stylesheet" />

    <!-- charts -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

    <!-- Data table -->
    <link href="https://unpkg.com/gridjs/dist/theme/mermaid.min.css" rel="stylesheet" />
    <script src="https://unpkg.com/gridjs/dist/gridjs.umd.js"></script>

    <!-- Animation -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/animejs/3.2.1/anime.min.js"></script>

    <!-- Map -->
    <link href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" rel="stylesheet" />
    <script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

    <!-- sweetalert2 -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.8.0/sweetalert2.min.css" rel="stylesheet" />
    <script src="https://cdnjs.cloudflare.com/ajax/libs/limonte-sweetalert2/11.8.0/sweetalert2.all.min.js"></script>

    <!-- moment js for date -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>


    <link href="https://juxinglong.github.io/static/MIS3033.css" rel="stylesheet" />

    </head>

    <body style="margin:20px;">

        <div class="alert alert-warning text-uppercase fw-bold" style="width:600px;">
            Welcome to my store
        </div>

    <ul class="nav nav-tabs" style="width:600px;">
        <li class="nav-item">
            <a class="nav-link active" href="~/home/index" target="_self">Order manage</a>
        </li>

        <li class="nav-item">
            <a class="nav-link" href="~/home/chart" target="_self">Summary</a>
        </li>
    </ul>

    <div style="width:600px;" class="m-bd-callout m-bd-callout-primary">

        <div style="width:300px;" class="input-group">
            <label class="input-group-text">Order ID</label>
            <input id="orderid" type="text" class="form-control"/>
        </div>

        <div style="width:300px;" class="input-group">
            <label class="input-group-text">Num Cogs</label>
            <input id="ncogs" type="text" class="form-control" />
        </div>

        <div style="width:300px;" class="input-group">
            <label class="input-group-text">Num Gears</label>
            <input id="ngears" type="text" class="form-control" />
        </div>

        <div>
            <button id="addbtn" class="btn btn-sm btn-primary">Add</button>
            <button id="editbtn" class="btn btn-sm btn-warning">Edit</button>
            <button id="deletebtn" class="btn btn-sm btn-danger">Delete</button>
        </div>

    </div>

    <div id="table"></div>

    <script>
        "use strict";
        var rootPath = '@Url.Content("~/")';
    </script>

    <script>
        "use strict";
        var grid = null;
        var g;

        {
            let btn;

            ///////////////////////////////////////////////////////////////////////////////////////////////
            // edit order
            btn = document.querySelector("#editbtn");
            btn.addEventListener("click", () => {
                editorder();
            });

            async function editorder() 
            {
                let fd = new FormData();
                fd.append("id", document.querySelector("#orderid").value);
                fd.append("ncogs", document.querySelector("#ncogs").value);
                fd.append("ngears", document.querySelector("#ngears").value);

                let r = await fetch(rootPath + "home/EditOrder", { method: "post", cache: "no-store", body: fd });

                if (r.ok == false) {
                    Swal.fire({
                        icon: "error",
                        title: "Failed!",
                        text: "Edit order failed!",
                    });
                }

                let rj = await r.json();

                if (rj.status == "success") {
                    ShowTable();
                    Swal.fire({
                        icon: "success",
                        title: "Success!",
                        text: "Edit order successfully!",
                    });
                }
                else {
                    Swal.fire({
                        icon: "error",
                        title: "Failed!",
                        text: "Edit order failed!",
                    });
                }

            }// end of edit order function

            ///////////////////////////////////////////////////////////////////////////////////////////////
            // add order
            btn = document.querySelector("#addbtn");
            btn.addEventListener("click", () => 
            {
                addorder();
            } );

    async function addorder() 
    { 
        let fd = new FormData();
        fd.append("id", document.querySelector("#orderid").value);
        fd.append("ncogs", document.querySelector("#ncogs").value);
        fd.append("ngears", document.querySelector("#ngears").value);

        let r = await fetch(rootPath + "home/AddOrder", { method: "post", cache: "no-store", body: fd });

        if (r.ok == false) 
        {
            Swal.fire({
                icon: "error",
                title: "Failed!",
                text: "Add new order failed!",
            });
        }

        let rj = await r.json();

        if (rj.status == "success") 
        {
            ShowTable();
            Swal.fire({
                icon: "success",
                title: "Success!",
                text: "Add new order successfully!",
            });
        }
        else 
        {
            Swal.fire({
                icon: "error",
                title: "Failed!",
                text: "Add new order failed!",
            }); 
        }

    }// end of add order function 

    ///////////////////////////////////////////////////////////////////////////////////////////

            async function ShowTable ()
            {
                if (grid != null) 
                { 
                    grid.destroy();
                }
}
                let table = document.querySelector("#table");
                table.innerHTML = "";//clean the table div

                let r = await fetch( rootPath + "home/GetOrders", {method:"post", cache:"no-store"} );
                let rj = await r.json();

                g = rj;

                let params = {
                    data: rj,
                    search:true,
                    sort:true,
                    pagination: {limit:5},
                    columns: [{ id: "id", name: "Order ID" }, { id: "nCogs", name: "Num Cogs" }, { id: "nGears", name: "Num Gears" },
                    { id: "subtotal", name: "Subtotal" }, { id: "level", name: "Level" },],
                };

                grid=new gridjs.Grid(params);
                grid.render( table );

            }// end of ShowTable function

            ShowTable();

        }

    </script>

    </body>
</html>